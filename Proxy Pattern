In fact, this program omits the procedure of socket connecting and binding, can't really work 

------------------------------------------------------------

import java.rmi.*

public interface GumballMachineRemote extends Remote{
    public int getCount() throws RemoteException;
    public String getLocation() throws RemoteException;
    public State getState() throws RemoteException;
}

public class GumballMachine extends UnicastRemoteObject implements GumballMachineRemote{
    private int count;
    private String location;
    private State state;
    
    public GumballMachine(String loaction, int count) throws RemoteExcetion{
        
    }
    
    public int getCount(){
        return this.count;
    }
    
    public String getLocation(){
        return this.loaction;
    }
    
    public State getState(){
        return this.state;
    }
}

public class GumballMachineTestDrive{
    public static void main(String[] args){
        // receive params from args
        
        GumballMachineRemote gumballMachine = null;
        int count;
        if(args.length != 2) System.exit(1); // error warning
        
        try{
            count = Integer.parseInt(args[1]);
            gumballMachine = new GumballMachine(args[0], count);
            // now we bind remote and real machine
            Naming.rebind("//" + args[0] + "/machine", gumballMachine);
            
        }catch(Exception e){
            e.printStackTrace();
        }
        
    }
}

public interface State extends Serializable{
    public void insertQuater();
    public void ejectQuater();
    public void turnCrank();
    public void dispense();
}

------------------------------------------------------------
// Client end

public class GumballMonitor{
    GumballMachineRemote machine;
    // now we aims to monitor a remote rather than a real machine
    
    public GumballMonitor(GumballMachineRemote machine){
        this.machine = machine;
    }
    
    public void report(){
        try{
            // since here we retrieve objects from server end, we need to throw RemoteException
            System.out.println("machine location is : " + machine.getLocation());
            System.out.println("machine state is: " + machine.getState());
            System.out.println("current # gumball: " + machine.getCount());
        }catch(RemoteException e){
            e.printStackTrace();
        }
    }
}

public class GumballMonitorTestDrive{
    public static void main(String[] args){
        String[] locations = {"rmi://santafe.machine",
                                "rmi://seattle.machine",
                                "rmi://boulder.machine"};
        GumballMonitor[] monitors = new GumballMonitor[locations.length];
        
        for(int i = 0; i < locations.length; i++){
            try{
                // use remote instead of actual machine
                GumballMachineRemote machine = (GumballMachineRemote) Naming.lookup(locations[i]);
                monitor[i] = new GumballMonitor(machine);
                System.out.println(monitor[i]);
            }catch(Exception e){
                e.printStackTrace();
            }
        }
        
        for(GumballMonitor monitor: monitors){
            monitor.report();
        }
    }
}





------------------------------------------------------------
// Dynamic Proxy
// means it's not like normal proxy, initialized once the program run
// we new a proxy whenever we want one

public interface PersonBean{
    public void setName(String name);
    public void setGender(String gender);
    public void setRate(int rating);
    
    public String getName();
    public String getGender();
    public int getRate();
}

public class PersonBeanImpl implements PersonBean{
    String name;
    String gender;
    int rating;
    int ratingCount;
    
    public PersonBean(){
        ratingCount = 0;
    }
    
    // series of getters and setters
    
    public int getRate(){
        if(ratingCount == 0) return 0;
        return (rating / ratingCount);
    }
    
    public void setRate(int rating){
        this.rating += rating;
        ratingCount++;
    }
}

// now we need to create two invocation handlers, since we want to restrict different roles' capabilities

public class OwnerInvocationHandler implements InvocationHandler{
    PersonBean person;
    
    public OwnerInvocationHandler(PersonBean person){
        this.personBean = person;
    }
    
    // invoke is the main job of this
    @Override
    public Object invoke(Object proxy, Method method, Object[] args) throws IllegalAccessException{
        try{
            if(method.getName().startsWith("get"){
                // means a getter, owner has access
                // first param is object the method belongs to.
                // method here is getter(getName...), it belongs to PersonBean, so obj is (PersonBean)person.
                // 2nd param is args, in getter, is null
                return method.invoke(person, args);
            }else if(method.getName.equals("setRate")){
                // owner can't access setRate of him/herself
                throws new IllegalAccessException();
            }
            else if(method.getName().startsWith("set"){
                // same as getter
                return method.invoke(person, args);
            }
        }catch(Exception e){
            e.printStackTrace();
        }
        return null;
    }
}

// nonowner is just like this, just some difference in access
public class NonOwnerInvocationHandler implements InvocationHandler{
    
}

public class MatchMakingTestDrive{
    public static void main(String[] args){
        
    }
    
    public void drive(){
        PersonBean marie = new PersonBean(); // initialize
        PersonBean ownerProxy = getOwnerProxy(marie);
        ownerProxy.setGender("girl");
        // now we can treat ownerProxy as an actual PersonBean object.
        // except it throws exception when calling "setRate"
    }
    
    
    // this is the proxy of concrete Personbean, via invocation handler
    public PersonBean getOwnerProxy(PersonBean person){
        return (PersonBean)Proxy.newProxyInstance(
            person.getClass().getClassLoader(),
            person.getClass().getInterfaces(),
            new OwnerInvocationHandler(marie));
    }

}








